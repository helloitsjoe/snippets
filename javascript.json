{
  "Console log variable": {
    "prefix": "cll",
    "body": ["console.log(`$1:`, $1);"],
    "description": "Console log a specific variable"
  },
  "Console log": {
    "prefix": "cl",
    "body": ["console.log(`$1`);"],
    "description": "Console log"
  },
  "Console object": {
    "prefix": "clo",
    "body": ["console.log({ $1 });"],
    "description": "Console object"
  },
  "Return New Promise": {
    "prefix": "prom",
    "body": ["return new Promise((resolve, reject) => {\n\t$1\n});"],
    "description": "Return a new Promise"
  },
  "TODO": {
    "prefix": "todo",
    "body": ["// TODO: $1"],
    "description": "Todo comment"
  },

  "Section 1": "IMPORT/EXPORT",

  "Import": {
    "prefix": "import-default",
    "body": "import $1 from '$2';",
    "description": "import X from X"
  },
  "Import Named": {
    "prefix": "import-named",
    "body": "import { $1 } from '$2';",
    "description": "import { X } from X"
  },
  "Import As": {
    "prefix": "import-as",
    "body": "import * as $1 from '$1'",
    "description": "import * as X from X"
  },
  "Import React": {
    "prefix": "imr",
    "body": "import React from 'react';\n\nconst $1 = ({$2}) => (\n\t$3\n);\n\nexport default $1;",
    "description": "import React"
  },
  "Import React with Component": {
    "prefix": "imrc",
    "body": "import React, { Component } from 'react';\n\nclass $1 extends Component {\n\tstate = { $2 }\n\n\trender() {\n\t\treturn(\n\t\t\t$3\n\t\t)\n\t}\n}\n\nexport default $1;",
    "description": "import React with Component"
  },
  "Export": {
    "prefix": "exx",
    "body": "export $1",
    "description": "export"
  },
  "Export Default": {
    "prefix": "exxd",
    "body": "export default $1",
    "description": "export default"
  },
  "Export From": {
    "prefix": "exxf",
    "body": "export * from '$1'",
    "description": "export * from 'path'"
  },

  "Section 2": "JEST",

  "'test' test block": {
    "prefix": "test",
    "body": "test('$1', () => {\n\t\n});",
    "description": "'test' test block"
  },
  "'it' test block": {
    "prefix": "it",
    "body": "it('$1', () => {\n\t\n});",
    "description": "'it' test block"
  },
  "'describe' test block": {
    "prefix": "describe",
    "body": "describe('$1', () => {\n\t\n});",
    "description": "'describe' test block"
  },
  "test.each": {
    "prefix": "test-each",
    "body": "test.each`\n\t$1\n`('', ({$2}) => {\n\t\n});"
  },
  "Expect toBe": {
    "prefix": "expect-toBe",
    "body": "expect($1).toBe($2);",
    "description": "Expect toBe"
  },

  "Section 3": "ENZYME",

  "data-enzyme-id prop": {
    "prefix": "data-enzyme-id-prop",
    "body": "data-enzyme-id=\"$1\"",
    "description": "data-enzyme-id prop"
  },
  "data-enzyme-id Selector": {
    "prefix": "data-enzyme-id-selector",
    "body": "const $1 = '[data-enzyme-id=\"$1\"]';",
    "description": "data-enzyme-id Selector"
  },
  "wrapper mount": {
    "prefix": "wrapper-mount",
    "body": "const wrapper = mount(<$1 />);",
    "description": "wrapper mount"
  },
  "expect wrapper find": {
    "prefix": "expect-wrapper-find",
    "body": "expect(wrapper.find($1).$2()).toBe($3);",
    "description": "expect wrapper find"
  },
  "simulate event": {
    "prefix": "simulate-event",
    "body": "wrapper.find($1).simulate('$2');",
    "description": "simulate event"
  }
}
